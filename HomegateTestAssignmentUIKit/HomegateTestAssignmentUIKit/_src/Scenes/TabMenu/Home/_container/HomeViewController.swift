//
//  HomeViewController.swift
//  HomegateTestAssignmentUIKit
//
//  Created by Vladimir Lukic on 25.10.21..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject
{
    
    // Display Properties lists from API
    func displayPropertyList(viewModel: Home.PropertyList.ViewModel)
    func displayPropertyListAPIError(error: Home.PropertyList.Error)
    
    // Display Favorite IDS list from Core Data
    func displayFavoriteList(viewModel: Home.FavoriteList.ViewModel)
    func displayFavoriteListError(error: Home.FavoriteList.Error)
}

class HomeViewController: BaseViewController, HomeDisplayLogic
{

    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Outlets
    
    // Header
    @IBOutlet weak var imgLogo: UIImageView!
    @IBOutlet weak var viewListMap: UIView!
    @IBOutlet weak var btnList: UIButton!
    @IBOutlet weak var btnMap: UIButton!
    
    // Container views
    @IBOutlet weak var viewListContainer: UIView!
    @IBOutlet weak var viewMapContainer: UIView!
    
    // Empty view
    @IBOutlet weak var viewEmptyError: UIView!
    @IBOutlet weak var lblEmptyError: UILabel!
    @IBOutlet weak var btnTryAgain: UIButton!
    
    // MARK: Properties
    
    var viewList: HomeListView!
    var viewMap: HomeMapView!
    
    var propertyList: [PropertyModel] = [PropertyModel]()
    var favoriteIdList: [Int] = [Int]()
    
    // Flags
    var isShowingList = true
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        // Configure view
        configureView()
        
        // Get favorites
        self.fetchFavoritesIds()
        
        // Call API
        callAPI()
    }
    
    // Configure view
    func configureView() {
        
        // Init and configure list view
        viewList = Bundle.main.loadNibNamed("HomeListView",
                                            owner: nil,
                                            options: nil)![0] as? HomeListView ?? HomeListView()
        viewList.frame = CGRect(x: 0.0, y: 0.0, width: self.viewListContainer.frame.size.width, height: self.viewListContainer.frame.size.height)
        viewList.context = self
        viewList.configureListView()
        viewListContainer.addSubview(viewList)
        
        // Init and configure Map view
        viewMap = Bundle.main.loadNibNamed("HomeMapView",
                                            owner: nil,
                                            options: nil)![0] as? HomeMapView ?? HomeMapView()
        viewMap.frame = CGRect(x: 0.0, y: 0.0, width: self.viewListContainer.frame.size.width, height: self.viewListContainer.frame.size.height)
        viewMap.context = self
        viewMap.configureMapView()
        viewMapContainer.addSubview(viewMap)
        
        // Resize button images
        btnList.setImage(UIImage(named: "ic-list-view")?.resizeWithWidth(width: 28.0), for: .normal)
        btnMap.setImage(UIImage(named: "ic-map-view")?.resizeWithWidth(width: 28.0), for: .normal)
        
        // Hide components initially
        self.viewListMap.alpha = 0.0
        self.btnList.alpha = 0.0
        self.btnMap.alpha = 0.0
        self.viewListContainer.alpha = 0.0
        self.viewMapContainer.alpha = 0.0
    }
    
    // Handle empty / error view
    func displayEmptyErrorView(with label: String, and alpha: CGFloat) {
        
        // Show / hide empty / error view and show table based on alpha
        self.viewEmptyError.alpha = alpha
        self.viewList.tblTable.alpha = alpha == 0.0 ? 1.0 : 0.0
        
        // Send subview to front / back
        if alpha == 0.0 {
            self.view.sendSubviewToBack(self.viewEmptyError)
        } else {
            self.view.bringSubviewToFront(self.viewEmptyError)
        }
        
        // Set label
        self.lblEmptyError.text = label
    }
    
    // Handle header buttons and containers
    func displayListMapView(alpha: CGFloat = 1.0) {
        self.viewListMap.alpha = alpha
        UIView.animate(withDuration: 0.15, delay: 0.0, options: .transitionCrossDissolve) { [self] in
            self.btnList.alpha = self.isShowingList ? 0.0 : 1.0
            self.viewListContainer.alpha = self.isShowingList ? 1.0 : 0.0
            self.btnMap.alpha = self.isShowingList ? 1.0 : 0.0
            self.viewMapContainer.alpha = isShowingList ? 0.0 : 1.0
        } completion: { completed in }

    }
    
    // MARK: API
    
    // Call API
    func callAPI() {
        
        // Hide empty view
        self.displayEmptyErrorView(with: "", and: 0.0)
        
        // Start activity indicator
        self.startActivityIndicator(onView: nil, color: .label)
        
        // Call interactor
        self.interactor?.handlePropertyList(request: Home.PropertyList.Request())
    }
    
    // Fetch favorites ids
    @objc func fetchFavoritesIds() {
        self.interactor?.handleFavoriteList(request: Home.FavoriteList.Request())
    }
    
    // MARK: Button actions
    
    // Show list action action
    @IBAction func showListOrMap(_ sender: UIButton) {
        isShowingList.toggle()
        displayListMapView()
    }
    
    // Handle try again action
    @IBAction func tryAgain(_ sender: UIButton) {
        
        // Call API again
        self.callAPI()
    }
    
    // MARK: Display api result
    
    func displayPropertyList(viewModel: Home.PropertyList.ViewModel) {
        
        // On main thread
        DispatchQueue.main.async {
            
            // Stop activity indicator
            self.stopActivityIndicator()
            
            // Check if empty model
            if viewModel.proppertyList.count == 0 {
                
                // Clear model
                self.propertyList = [PropertyModel]()
                
                // Show error view // Hide containers / Reset map camera
                self.displayEmptyErrorView(with: "Property list is empty.", and: 1.0)
                self.displayListMapView(alpha: 0.0)
                self.viewMap.resetCamera()
                return
            }
            
            // Hide error view / Show containers
            else {
                self.displayEmptyErrorView(with: "", and: 0.0)
                self.displayListMapView()
            }
            
            // Update model and reload table
            self.propertyList = viewModel.proppertyList
            self.viewList.tblTable.reloadData()
            
            // Update map with pins
            self.viewMap.updateMapWithCoordinates()
        }
    }
    
    func displayPropertyListAPIError(error: Home.PropertyList.Error) {
        
        // On main thread
        DispatchQueue.main.async {
            
            // Stop activity indicator
            self.stopActivityIndicator()
            
            // Clear model
            self.propertyList = [PropertyModel]()
            
            // Show error view
            self.displayEmptyErrorView(with: error.error.rawValue, and: 1.0)
            
            // Hide containers
            self.displayListMapView(alpha: 0.0)
        }
    }
    
    // MARK: Display Core data result
    
    func displayFavoriteList(viewModel: Home.FavoriteList.ViewModel) {
        
        // Update favorite list
        self.favoriteIdList = viewModel.favoriteIdList
        
        // Reload table on main queue
        DispatchQueue.main.async {
            self.viewList.tblTable.reloadData()
            
            // Update map info view if exists
            if self.viewMap.gmInfoView != nil {
                self.viewMap.gmInfoView?.updateFavoriteStatus()
            }
        }
    }
    
    func displayFavoriteListError(error: Home.FavoriteList.Error) {
        
        // Print error
        print(error.error.localizedDescription)
        
        // Clear favorite list
        self.favoriteIdList = [Int]()
        
        // Reload table on main queue
        DispatchQueue.main.async {
            self.viewList.tblTable.reloadData()
            
            // Update map info view if exists
            if self.viewMap.gmInfoView != nil {
                self.viewMap.gmInfoView?.updateFavoriteStatus()
            }
        }
    }
    
    // MARK: - Notification handling
    // MARK:
    
    override func registerForNotifications() {
        super.registerForNotifications()
        
        NotificationCenter.default.addObserver(self, selector: #selector(fetchFavoritesIds), name: CoreDataManager.notification_favorites_updated, object: nil)
    }
    
    override func unregisterForNotifications() {
        NotificationCenter.default.removeObserver(self, name: CoreDataManager.notification_favorites_updated, object: nil)
        
        super.unregisterForNotifications()
    }
}

// MARK: Handle Property list delegate with update favorite action

extension HomeViewController {
    
    // Update favorite
    func updateFavorite(model: PropertyModel) {
        do {
            try CoreDataManager.update(favorite: model)
        } catch let error as NSError {
            print(error.localizedDescription)
        }
    }
}
