//
//  HomeListPresenter.swift
//  HomegateTestAssignmentUIKit
//
//  Created by Vladimir Lukic on 23.10.21..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeListPresentationLogic
{
    
    // Handle API response
    func presentPropertyList(response: HomeList.PropertyList.Response)
    
    // Call Core data
    func presentFavoriteList(response: HomeList.FavoriteList.Response)
}

class HomeListPresenter: HomeListPresentationLogic
{
    
    weak var viewController: HomeListDisplayLogic?
    
    // MARK: API response
    
    func presentPropertyList(response: HomeList.PropertyList.Response) {
        
        // Check for errors
        if response.networkError != nil {
            viewController?.displayPropertyListAPIError(error: HomeList.PropertyList.Error(error: response.networkError ?? .unknownError))
        }
        
        // Handle empty response
        else if response.result ?? "" == "" {
            viewController?.displayPropertyListAPIError(error: HomeList.PropertyList.Error(error: .noResponseData))
        }
        
        // Handle successful response
        else {
            
            // Generating JSON data
            guard let data = (response.result ?? "").data(using: .utf8, allowLossyConversion: false) else {
                viewController?.displayPropertyListAPIError(error: HomeList.PropertyList.Error(error: .badResponse))
                return
            }
            
            // Decode data into model
            do {
                let decoder = JSONDecoder()
                let apiResponseModel = try decoder.decode(BaseApiListModel<PropertyModel>.self, from: data)
                
                // Return result
                viewController?.displayPropertyList(viewModel: HomeList.PropertyList.ViewModel(proppertyList: apiResponseModel.items ?? [PropertyModel]()))
            }
            catch {
                
                // Catch decoding error
                viewController?.displayPropertyListAPIError(error: HomeList.PropertyList.Error(error: .decodingFailed))
                return
            }
            
        }
    }
    
    // MARK: Core Data response
    
    func presentFavoriteList(response: HomeList.FavoriteList.Response) {
        if response.error != nil {
            
            // Call view controller display error
            viewController?.displayFavoriteListError(error: HomeList.FavoriteList.Error(error: response.error!))
        } else {
            
            // Call successful view controller
            viewController?.displayFavoriteList(viewModel: HomeList.FavoriteList.ViewModel(favoriteIdList: response.result ?? [Int]()))
        }
    }
}
